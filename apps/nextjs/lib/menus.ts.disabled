// SPDX-FileCopyrightText: 2023 Temple University <kleinweb@temple.edu>
// SPDX-License-Identifier: GPL-3.0-or-later

// <https://en.wikipedia.org/wiki/Tree_%28data_structure%29#Terminology>

import {HierarchicalNode} from '@/gql/graphql'

export type FlattenedTreeNode = HierarchicalNode & {
  key?: string
  children?: FlattenedTreeNode[]
}

/* eslint-disable no-unused-vars */
export enum FlattenedTreeNodeKeysEnum {
  idKey = 'idKey',
  parentKey = 'parentKey',
  childrenKey = 'childrenKey',
}
/* eslint-enable no-unused-vars */

/* eslint-disable no-unused-vars */
export enum FlattenedTreeNodeKeysDefaultsEnum {
  key = 'key',
  parentId = 'parentId',
  children = 'children',
}
/* eslint-enable no-unused-vars */

/**
 * Unsafely convert a flat list to a hierarchical list.
 *
 * Most commonly used for hierarchical data types like menu items and
 * hierarchical post types e.g. Pages.
 *
 * Copy-pasted from JavaScript.
 *
 * FIXME: Untyped internals and unsafe defaults
 * TODO: Refactor to use a reducer / pure functions.
 *
 * @see {@link <https://www.wpgraphql.com/docs/menus>}
 */
export const unsafeFlatListToHierarchical = (
  data = [],
  {idKey = 'key', parentKey = 'parentId', childrenKey = 'children'} = {},
) => {
  const tree = []
  const childrenOf = {}
  data.forEach(item => {
    // @ts-expect-error
    const newItem = {...item}
    const {[idKey]: id, [parentKey]: parentId = 0} = newItem
    childrenOf[id] = childrenOf[id] || []
    newItem[childrenKey] = childrenOf[id]
    parentId
      ? (childrenOf[parentId] = childrenOf[parentId] || []).push(newItem)
      : // @ts-expect-error
        tree.push(newItem)
  })
  return tree
}

/**
 * Experimentally convert a flat list to a hierarchical list.
 *
 * Most commonly used for hierarchical data types like menu items and
 * hierarchical post types e.g. Pages.
 *
 * FIXME: Unsafe + experimental
 * TODO: Refactor to use a reducer / pure functions.
 *
 * @see {@link <https://www.wpgraphql.com/docs/menus>}
 */
export const experimentalFlatListToHierarchical = (
  data: FlattenedTreeNode[] = [],
  keys = {idKey: 'key', parentKey: 'parentId', childrenKey: 'children'},
) => {
  const {idKey, parentKey, childrenKey} = keys
  const tree = []
  const childrenOf = {}
  data.forEach(item => {
    const newItem = {...item}
    const id = newItem[idKey]
    const parentId = newItem[parentKey] ?? 0
    childrenOf[id] = childrenOf[id] ?? []
    newItem[childrenKey] = childrenOf[id]
    parentId
      ? (childrenOf[parentId] = childrenOf[parentId] || []).push(newItem)
      : // @ts-expect-error
        tree.push(newItem)
  })
  return tree
}
